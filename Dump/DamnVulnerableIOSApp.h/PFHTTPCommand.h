/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "NSStreamDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSCondition, NSData, NSURL, PFHTTPResponse, PFHTTPHeaders, NSError, NSTimer, NSInputStream, NSOutputStream;
@protocol PFHTTPRequest;

@interface PFHTTPCommand : XXUnknownSuperclass <NSStreamDelegate> {
	NSOutputStream* uplink;
	NSInputStream* downlink;
	int bytesUploaded;
	NSCondition* doneCondition;
	BOOL sentRequestHeaders;
	BOOL isFinished;
	int status;
	BOOL isCancelled;
	BOOL usePersistentConnection;
	BOOL isNetworkActive;
	NSURL* url;
	NSTimer* timeoutTimer;
	PFHTTPCommand* referenceCycleToPreventZombification;
	PFHTTPHeaders* requestHeaders;
	NSData* requestHeaderData;
	id<PFHTTPRequest> request;
	NSError* networkError;
	PFHTTPResponse* response;
	id uploadProgressBlock;
	double timeout;
}
@property(assign, nonatomic) BOOL isNetworkActive;
@property(retain, nonatomic) PFHTTPCommand* referenceCycleToPreventZombification;
@property(retain, nonatomic) NSTimer* timeoutTimer;
@property(retain, nonatomic) NSData* requestHeaderData;
@property(copy) id uploadProgressBlock;
@property(readonly, assign) PFHTTPResponse* response;
@property(readonly, assign) NSError* networkError;
@property(readonly, assign) int status;
@property(retain) id<PFHTTPRequest> request;
@property(retain) PFHTTPHeaders* requestHeaders;
@property(assign) BOOL usePersistentConnection;
@property(assign) double timeout;
@property(readonly, assign, nonatomic) NSURL* url;
+(id)getCommandWithURL:(id)url;
+(id)postCommandWithURL:(id)url;
-(void).cxx_destruct;
-(void)didFinish;
-(void)finishWithHTTPStatus;
-(void)finishWithError:(id)error;
-(void)reportUploadProgress:(int)progress;
-(void)handleDownlinkEvent:(unsigned)event;
-(void)handleUplinkEvent:(unsigned)event;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)didTimeout;
-(void)scheduleTimeoutInCurrentThread;
-(void)resetTimeoutTimer;
-(void)scheduleInCurrentThread;
-(BOOL)isFinished;
-(void)cancel;
-(void)waitUntilFinished;
-(void)sendInBackground;
-(void)send;
-(id)initWithURL:(id)url;
@end

