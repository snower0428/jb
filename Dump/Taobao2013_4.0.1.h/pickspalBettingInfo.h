//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "TBBettingHelper.h"

@class CPMatchFilter, CPMatchPageBottombarDelegate, CPSeriesPassManager, NSDate, NSMutableArray, NSString;

@interface pickspalBettingInfo : NSObject <TBBettingHelper>
{
    int _lotteryType;
    NSString *_lotteryName;
    int _playMethod;
    int _backupPlayMethod;
    NSMutableArray *_suppotedPlaymethodArray;
    NSString *_issueID;
    float _stackPrice;
    int _money;
    int _stackNum;
    int _stackNumSeriesPass;
    int _maxMultiNum;
    int _multiNum;
    NSString *_lastErrorTip;
    NSDate *_lastBuyTime;
    CPMatchPageBottombarDelegate *_matchPageBottombarDelegate;
    NSMutableArray *_dayMatchsArray;
    NSMutableArray *_backupMatchsArray;
    NSMutableArray *_selectedMatchsArray;
    CPMatchFilter *_matchFilter;
    CPSeriesPassManager *_passManager;
    NSMutableArray *_hitMatchRewardArray;
}

+ (id)sharedPickspalBettingInfo;
@property(retain, nonatomic) NSMutableArray *hitMatchRewardArray; // @synthesize hitMatchRewardArray=_hitMatchRewardArray;
@property(retain, nonatomic) CPSeriesPassManager *passManager; // @synthesize passManager=_passManager;
@property(retain, nonatomic) CPMatchFilter *matchFilter; // @synthesize matchFilter=_matchFilter;
@property(retain, nonatomic) NSMutableArray *selectedMatchsArray; // @synthesize selectedMatchsArray=_selectedMatchsArray;
@property(retain, nonatomic) NSMutableArray *backupMatchsArray; // @synthesize backupMatchsArray=_backupMatchsArray;
@property(retain, nonatomic) NSMutableArray *dayMatchsArray; // @synthesize dayMatchsArray=_dayMatchsArray;
@property(readonly, nonatomic) CPMatchPageBottombarDelegate *matchPageBottombarDelegate; // @synthesize matchPageBottombarDelegate=_matchPageBottombarDelegate;
@property(retain, nonatomic) NSString *lastErrorTip; // @synthesize lastErrorTip=_lastErrorTip;
@property(nonatomic, setter=setMultiNum:) int multiNum; // @synthesize multiNum=_multiNum;
@property(readonly, nonatomic) int maxMultiNum; // @synthesize maxMultiNum=_maxMultiNum;
@property(nonatomic) int money; // @synthesize money=_money;
@property(nonatomic) int stackNumSeriesPass; // @synthesize stackNumSeriesPass=_stackNumSeriesPass;
@property(nonatomic) int stackNum; // @synthesize stackNum=_stackNum;
@property(retain, nonatomic, getter=getIssueID) NSString *issueID; // @synthesize issueID=_issueID;
@property(nonatomic) int playMethod; // @synthesize playMethod=_playMethod;
@property(retain, nonatomic) NSString *lotteryName; // @synthesize lotteryName=_lotteryName;
@property(nonatomic) int lotteryType; // @synthesize lotteryType=_lotteryType;
- (void).cxx_destruct;
- (void)removeMatchWithOrder:(id)arg1;
- (void)prepareToLotteryHall;
- (void)restoreSelectedMathsFromBackup;
- (void)backupSelectedMatchs;
- (void)commitEditedMatchsToSelected;
- (void)restoreMatchFilterFromBackup;
- (void)clearMatchFilter;
- (id)getPlaymethodNameWithLottery:(int)arg1 andPlaymethod:(int)arg2;
- (id)getPlayMethodNames;
- (BOOL)switchToPlayMethodWithIndex:(int)arg1;
- (int)playMethodCount;
- (float)getTotalFee;
- (void)resetBottomLabelContent:(id)arg1;
- (void)resetTopLabelContent:(id)arg1;
- (id)validSelectedMatchs;
- (int)computeMoney;
- (int)getAllowedMaxCourageCount;
- (void)deployHitMatchRewards;
- (id)getSpArrayOfCourage:(BOOL)arg1 andMaxSp:(BOOL)arg2;
- (int)selectedMatchsCount;
- (BOOL)resetCourageStatusOfSelectedMatchs;
- (int)courageCount;
- (void)commitSeriesPassSetting;
- (void)cancelSeriesPassSetting;
- (BOOL)HandleSeriesPassClickedAtArrayIndex:(int)arg1 andPassIndex:(int)arg2;
- (void)HandleSelectedMatchsEdition;
- (void)updateSeriesPassArray;
- (void)computeStakeCount;
- (void)computeHitMatchRewardArray;
- (float)minReward;
- (float)maxReward;
- (id)getSelectedMatchsArray;
- (id)getFiltedMatchsArray;
- (id)getBetNumbers;
- (BOOL)isOverMaxMoney;
- (void)removeStakeAtIndex:(int)arg1;
- (void)clearStakes;
- (void)insertMatch:(id)arg1;
@property(readonly, nonatomic, getter=getLastBuyTime) NSDate *lastBuyTime; // @synthesize lastBuyTime=_lastBuyTime;
- (id)init;

@end

